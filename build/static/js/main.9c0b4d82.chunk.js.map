{"version":3,"sources":["app/models/game.model.ts","app/components/food/Food.tsx","app/components/snake/Snake.tsx","app/components/board/Board.tsx","app/components/panel/Panel.tsx","app/reducer.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GamePhase","Food","props","useState","food","setFood","useEffect","state","foodPosition","length","className","style","width","snakeSize","height","top","left","snakePositions","gameState","Snake","snakePieces","setSnakePieces","pieces","map","snakePosition","index","y","x","isOppositeDirection","currentDirection","newDirection","Board","borderTopBottomWidth","setBorderTopBottomWidth","borderLeftRightWidth","setBorderLeftRightWidth","boardWidth","setBoardWidth","boardHeight","setBoardHeight","directions","setDirections","windowWidth","window","innerWidth","windowHeight","innerHeight","verticalBorder","horizontalBorder","newBoardHeight","newBoardWidth","numberOfVerticalCells","numberOfHorizontalCells","dispatch","type","INITIAL","board","Array","from","keys","TICK","timer","setTimeout","direction","slice","clearTimeout","id","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","gridTemplateRows","gridTemplateColumns","onKeyDown","event","key","indexOf","toUpperCase","START","tabIndex","Panel","title","setTitle","action","setAction","opacity","setOpacity","document","getElementById","focus","startGame","onClick","recuder","generateNewFoodPosition","xCell","isPlaying","isGameOver","GAME_OVER","boardSnakeFoodPositions","calculateBoardSnakeFoodPositions","snakeHeadPosition","newSnakePositions","isSnakeGoingToEat","snakeLastPosition","i","currentPosition","xPosition","Math","floor","random","yPosition","App","initialState","useReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9c0b4d82.chunk.js","sourcesContent":["export enum GamePhase {\n  INITIAL,\n  START,\n  TICK,\n  GAME_OVER,\n}\n\nexport type Cell = 'empty' | 'snake' | 'food';\n\nexport type MoveDirection = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';\n\nexport interface SnakePosition {\n  x: number;\n  y: number;\n  direction?: MoveDirection;\n}\n","import './Food.css';\nimport React, { useEffect, useState } from 'react';\nimport { State } from '../../models/state.model';\n\ninterface Props {\n  state: State;\n}\n\nconst Food: React.FC<Props> = (props: Props) => {\n  const [food, setFood] = useState<JSX.Element>(<div></div>);\n\n  useEffect(() => {\n    if (props.state.foodPosition.length > 0) {\n      setFood(\n        <div\n          className=\"food\"\n          style={{\n            width: props.state.snakeSize,\n            height: props.state.snakeSize,\n            top: `${props.state.foodPosition[1] * props.state.snakeSize}px`,\n            left: `${props.state.foodPosition[0] * props.state.snakeSize}px`,\n          }}\n        ></div>,\n      );\n    }\n  }, [props.state.snakePositions, props.state.gameState]);\n\n  return food;\n};\n\nexport default Food;\n","import './Snake.css';\nimport React, { useEffect, useState } from 'react';\nimport { State } from '../../models/state.model';\n\ninterface Props {\n  state: State;\n}\n\nconst Snake: React.FC<Props> = (props: Props) => {\n  const [snakePieces, setSnakePieces] = useState<JSX.Element[]>([]);\n\n  useEffect(() => {\n    const pieces = props.state.snakePositions.map((snakePosition, index) => (\n      <div\n        key={index}\n        className=\"snake\"\n        style={{\n          width: props.state.snakeSize,\n          height: props.state.snakeSize,\n          top: `${snakePosition.y * props.state.snakeSize}px`,\n          left: `${snakePosition.x * props.state.snakeSize}px`,\n        }}\n      ></div>\n    ));\n    setSnakePieces(pieces);\n  }, [props.state.snakePositions]);\n\n  return <>{snakePieces}</>;\n};\n\nexport default Snake;\n","import './Board.css';\nimport React, { Dispatch, KeyboardEvent, useEffect, useState } from 'react';\nimport { GamePhase, MoveDirection } from '../../models/game.model';\nimport { GameAction, State } from '../../models/state.model';\nimport Food from '../food/Food';\nimport Snake from '../snake/Snake';\n\ninterface Props {\n  state: State;\n  dispatch: Dispatch<GameAction>;\n}\n\nconst Board: React.FC<Props> = (props: Props) => {\n  const snakeSize = 20;\n  const [borderTopBottomWidth, setBorderTopBottomWidth] = useState(0);\n  const [borderLeftRightWidth, setBorderLeftRightWidth] = useState(0);\n  const [boardWidth, setBoardWidth] = useState(0);\n  const [boardHeight, setBoardHeight] = useState(0);\n  // Save all user inputs (gives a better UX)\n  const [directions, setDirections] = useState<MoveDirection[]>([]);\n\n  // Set board and border size\n  useEffect(() => {\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n\n    const verticalBorder = windowHeight % snakeSize;\n    const horizontalBorder = windowWidth % snakeSize;\n\n    setBorderTopBottomWidth(verticalBorder / 2);\n    setBorderLeftRightWidth(horizontalBorder / 2);\n\n    const newBoardHeight = windowHeight - verticalBorder;\n    const newBoardWidth = windowWidth - horizontalBorder;\n    setBoardHeight(newBoardHeight);\n    setBoardWidth(newBoardWidth);\n\n    const numberOfVerticalCells = newBoardHeight / snakeSize;\n    const numberOfHorizontalCells = newBoardWidth / snakeSize;\n\n    props.dispatch({\n      type: GamePhase.INITIAL,\n      board: Array.from(\n        [...Array(numberOfHorizontalCells).keys()].map(() => 'empty'),\n        () => [...Array(numberOfVerticalCells).keys()].map(() => 'empty'),\n      ),\n    });\n  }, []);\n\n  useEffect(() => {\n    if (props.state.gameState === GamePhase.TICK) {\n      const timer = setTimeout(() => {\n        props.dispatch({\n          type: GamePhase.TICK,\n          direction: directions[0],\n        });\n      }, 100);\n\n      // Don't remove the last user input (direction) or the snake would stop\n      if (directions.length > 1) {\n        setDirections(directions.slice(1));\n      }\n      return () => clearTimeout(timer);\n    }\n  }, [props.state.snakePositions]);\n\n  // Listen to user key down events\n  const onKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n        const direction = directions[directions.length - 1];\n        // e.g.: Transform 'ArrowDown' in 'DOWN'\n        const newDirection = event.key\n          .slice(event.key.indexOf('w') + 1)\n          .toUpperCase() as MoveDirection;\n\n        // If newDirection is different and not the opposite direction of current direction\n        if (\n          props.state.gameState === GamePhase.START ||\n          (direction !== newDirection && !isOppositeDirection(direction, newDirection))\n        ) {\n          if (directions.length === 1) {\n            setDirections([newDirection, newDirection]);\n          } else {\n            setDirections([...directions, newDirection]);\n          }\n        }\n\n        // Start game\n        if (props.state.gameState === GamePhase.START) {\n          props.dispatch({\n            type: GamePhase.TICK,\n            direction: newDirection,\n          });\n        }\n        break;\n    }\n  };\n\n  return (\n    <div\n      id=\"board\"\n      className=\"board\"\n      style={{\n        borderTopWidth: borderTopBottomWidth,\n        borderBottomWidth: borderTopBottomWidth,\n        borderLeftWidth: borderLeftRightWidth,\n        borderRightWidth: borderLeftRightWidth,\n        gridTemplateRows: `repeat(${boardHeight / snakeSize}, ${snakeSize}px)`,\n        gridTemplateColumns: `repeat(${boardWidth / snakeSize}, ${snakeSize}px)`,\n      }}\n      onKeyDown={onKeyDown}\n      tabIndex={0}\n    >\n      <Snake state={props.state} />\n      <Food state={props.state} />\n    </div>\n  );\n};\n\nconst isOppositeDirection = (\n  currentDirection: MoveDirection,\n  newDirection: MoveDirection,\n): boolean => {\n  switch (currentDirection) {\n    case 'UP':\n      if (newDirection === 'DOWN') {\n        return true;\n      }\n      break;\n    case 'DOWN':\n      if (newDirection === 'UP') {\n        return true;\n      }\n      break;\n    case 'LEFT':\n      if (newDirection === 'RIGHT') {\n        return true;\n      }\n      break;\n    case 'RIGHT':\n      if (newDirection === 'LEFT') {\n        return true;\n      }\n      break;\n  }\n\n  return false;\n};\n\nexport default Board;\n","import './Panel.css';\nimport React, { Dispatch, KeyboardEvent, useEffect, useState } from 'react';\nimport { GamePhase } from '../../models/game.model';\nimport { GameAction, State } from '../../models/state.model';\n\ninterface Props {\n  state: State;\n  dispatch: Dispatch<GameAction>;\n}\n\nconst Panel: React.FC<Props> = (props: Props) => {\n  const [title, setTitle] = useState('React Snake Game');\n  const [action, setAction] = useState('Start');\n  const [opacity, setOpacity] = useState(1);\n\n  useEffect(() => {\n    document.getElementById('btnStart')?.focus();\n  }, []);\n\n  useEffect(() => {\n    switch (props.state.gameState) {\n      case GamePhase.INITIAL:\n        setTitle('React Snake Game');\n        setAction('Start');\n        break;\n      case GamePhase.START:\n        setOpacity(0);\n        break;\n      case GamePhase.TICK:\n        break;\n      default:\n        setTitle('Game Over');\n        setAction('Play again');\n        setOpacity(1);\n        document.getElementById('btnStart')?.focus();\n        break;\n    }\n  }, [props.state.gameState]);\n\n  // Listen to user key down events\n  const onKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    switch (event.key) {\n      case 'Enter':\n        startGame();\n        break;\n    }\n  };\n\n  const startGame = () => {\n    props.dispatch({ type: GamePhase.START });\n    document.getElementById('board')?.focus();\n  };\n\n  return (\n    <div className=\"panel\" style={{ opacity: opacity }} onKeyDown={onKeyDown} tabIndex={0}>\n      <div>\n        <h1>{title}</h1>\n        <button id=\"btnStart\" onClick={startGame}>\n          {action}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import { Cell, GamePhase, MoveDirection, SnakePosition } from './models/game.model';\nimport { GameAction, State } from './models/state.model';\n\nexport const recuder = (state: State, action: GameAction): State => {\n  switch (action.type) {\n    case GamePhase.INITIAL:\n      return {\n        ...state,\n        board: action.board,\n      };\n    case GamePhase.START:\n      const foodPosition = generateNewFoodPosition(state.board) as number[];\n      const board = state.board.map((xCell) => xCell.map(() => 'empty')) as Cell[][];\n      board[foodPosition[0]][foodPosition[1]] = 'food';\n\n      return {\n        ...state,\n        gameState: GamePhase.START,\n        isPlaying: true,\n        board,\n        snakePositions: [{ y: 10, x: 10, direction: 'UP' }],\n        foodPosition,\n      };\n    case GamePhase.TICK:\n      if (state.isPlaying) {\n        if (isGameOver({ ...state, direction: action.direction })) {\n          return {\n            ...state,\n            gameState: GamePhase.GAME_OVER,\n            isPlaying: false,\n            direction: 'UP',\n          };\n        }\n\n        const boardSnakeFoodPositions = calculateBoardSnakeFoodPositions(\n          state.board,\n          state.snakePositions,\n          state.foodPosition,\n          action.direction,\n        );\n\n        // Change snake position after x ms\n        return {\n          ...state,\n          gameState: GamePhase.TICK,\n          isPlaying: true,\n          board: boardSnakeFoodPositions.board,\n          snakePositions: boardSnakeFoodPositions.snakePositions,\n          foodPosition: boardSnakeFoodPositions.foodPosition,\n          direction: action.direction,\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst calculateBoardSnakeFoodPositions = (\n  board: Cell[][],\n  snakePositions: SnakePosition[],\n  foodPosition: number[],\n  newDirection: MoveDirection,\n): { board: Cell[][]; snakePositions: SnakePosition[]; foodPosition: number[] } => {\n  let snakeHeadPosition = { ...snakePositions[snakePositions.length - 1] };\n  let newSnakePositions = [...snakePositions];\n\n  // Check if snake is going to eat, if yes, snake grows\n  let isSnakeGoingToEat = false;\n  switch (newDirection) {\n    case 'UP':\n      if (board[snakeHeadPosition.x][snakeHeadPosition.y - 1] === 'food') {\n        isSnakeGoingToEat = true;\n        newSnakePositions = [newSnakePositions[0], ...newSnakePositions];\n      }\n      break;\n\n    case 'DOWN':\n      if (board[snakeHeadPosition.x][snakeHeadPosition.y + 1] === 'food') {\n        isSnakeGoingToEat = true;\n        newSnakePositions = [newSnakePositions[0], ...newSnakePositions];\n      }\n      break;\n\n    case 'LEFT':\n      if (board[snakeHeadPosition.x - 1][snakeHeadPosition.y] === 'food') {\n        isSnakeGoingToEat = true;\n        newSnakePositions = [newSnakePositions[0], ...newSnakePositions];\n      }\n      break;\n\n    case 'RIGHT':\n      if (board[snakeHeadPosition.x + 1][snakeHeadPosition.y] === 'food') {\n        isSnakeGoingToEat = true;\n        newSnakePositions = [newSnakePositions[0], ...newSnakePositions];\n      }\n      break;\n  }\n\n  // If snake is going to eat generate new food position\n  if (isSnakeGoingToEat) {\n    foodPosition = generateNewFoodPosition(board) as number[];\n    board[foodPosition[0]][foodPosition[1]] = 'food';\n  }\n\n  // Move snake body\n  let snakeLastPosition = { ...snakeHeadPosition };\n  for (let i = newSnakePositions.length - 2; i >= 0; i--) {\n    const currentPosition = { ...newSnakePositions[i] };\n    board[currentPosition.x][currentPosition.y] = 'empty';\n    newSnakePositions[i] = snakeLastPosition;\n    board[newSnakePositions[i].x][newSnakePositions[i].y] = 'snake';\n    snakeLastPosition = currentPosition;\n  }\n\n  // Move snake head\n  switch (newDirection) {\n    case 'UP':\n      snakeHeadPosition = {\n        x: snakeHeadPosition.x,\n        y: snakeHeadPosition.y - 1,\n        direction: newDirection,\n      };\n      break;\n\n    case 'DOWN':\n      snakeHeadPosition = {\n        x: snakeHeadPosition.x,\n        y: snakeHeadPosition.y + 1,\n        direction: newDirection,\n      };\n      break;\n\n    case 'LEFT':\n      snakeHeadPosition = {\n        x: snakeHeadPosition.x - 1,\n        y: snakeHeadPosition.y,\n        direction: newDirection,\n      };\n      break;\n\n    case 'RIGHT':\n      snakeHeadPosition = {\n        x: snakeHeadPosition.x + 1,\n        y: snakeHeadPosition.y,\n        direction: newDirection,\n      };\n      break;\n  }\n\n  return {\n    board: [...board],\n    snakePositions: [\n      ...newSnakePositions.slice(0, newSnakePositions.length - 1),\n      snakeHeadPosition,\n    ],\n    foodPosition,\n  };\n};\n\n// Check walls and tale\nconst isGameOver = ({ board, snakePositions, direction }: State): boolean => {\n  const snakeHeadPosition = snakePositions[snakePositions.length - 1];\n\n  switch (direction) {\n    case 'UP':\n      // hit ceiling or hit tale\n      if (\n        snakeHeadPosition.y === 0 ||\n        board[snakeHeadPosition.x][snakeHeadPosition.y - 1] === 'snake'\n      ) {\n        return true;\n      }\n      break;\n    case 'DOWN':\n      // hit floor or hit tale\n      if (\n        snakeHeadPosition.y === board[0].length - 1 ||\n        board[snakeHeadPosition.x][snakeHeadPosition.y + 1] === 'snake'\n      ) {\n        return true;\n      }\n      break;\n    case 'LEFT':\n      // hit left wall or hit tale\n      if (\n        snakeHeadPosition.x === 0 ||\n        board[snakeHeadPosition.x - 1][snakeHeadPosition.y] === 'snake'\n      ) {\n        return true;\n      }\n      break;\n    case 'RIGHT':\n      // hit right wall or hit tale\n      if (\n        snakeHeadPosition.x === board.length - 1 ||\n        board[snakeHeadPosition.x + 1][snakeHeadPosition.y] === 'snake'\n      ) {\n        return true;\n      }\n      break;\n  }\n\n  return false;\n};\n\nconst generateNewFoodPosition = (board: Cell[][]): number[] | void => {\n  // Generate random positions\n  let xPosition = Math.floor(Math.random() * board.length);\n  let yPosition = Math.floor(Math.random() * board[0].length);\n\n  // Check if cell is empty\n  if (board[xPosition][yPosition] === 'empty') {\n    return [xPosition, yPosition];\n  }\n\n  // Cell is not empty, generate other random x position\n  xPosition = Math.floor(Math.random() * board[0].length);\n\n  // Check if cell is empty\n  if (board[xPosition][yPosition] === 'empty') {\n    return [xPosition, yPosition];\n  }\n\n  // Cell is not empty, generate other random y position\n  yPosition = Math.floor(Math.random() * board.length);\n\n  // Check if cell is empty\n  if (board[xPosition][yPosition] === 'empty') {\n    return [xPosition, yPosition];\n  }\n\n  // Try again\n  generateNewFoodPosition(board);\n};\n","import './App.css';\nimport React, { useReducer } from 'react';\nimport Board from './components/board/Board';\nimport Panel from './components/panel/Panel';\nimport { GamePhase } from './models/game.model';\nimport { State } from './models/state.model';\nimport { recuder } from './reducer';\n\nconst App: React.FC = () => {\n  const initialState: State = {\n    gameState: GamePhase.INITIAL,\n    isPlaying: false,\n    snakeSize: 20,\n    board: [],\n    snakePositions: [{ y: 10, x: 10, direction: 'UP' }],\n    foodPosition: [],\n    direction: 'UP',\n  };\n\n  const [state, dispatch] = useReducer(recuder, initialState);\n\n  return (\n    <div>\n      <Board state={state} dispatch={dispatch} />\n      <Panel state={state} dispatch={dispatch} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}